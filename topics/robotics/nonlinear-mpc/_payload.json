[{"data":1,"prerenderedAt":288},["Reactive",2],{"content-/topics/robotics/nonlinear-mpc":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"_empty":6,"title":8,"description":9,"author":10,"slug":11,"tag":11,"img":12,"body":13,"_type":283,"_id":284,"_source":285,"_file":286,"_extension":287},"/topics/robotics/nonlinear-mpc","robotics",false,"","Nonlinear Model Predictive Control","Introduction to Nonlinear Model Predictive Control","Din Sokheng","nonlinear-mpc","/topics/robotics/nmpc/predict_horizon.png",{"type":14,"children":15,"toc":277},"root",[16,25,31,54,65,71,104,109,115,120,124,129,172,177,181,186,233,239,254,259,263,268,273],{"type":17,"tag":18,"props":19,"children":21},"element","h2",{"id":20},"what-is-model-predictive-control",[22],{"type":23,"value":24},"text","What is Model Predictive Control ?",{"type":17,"tag":26,"props":27,"children":28},"p",{},[29],{"type":23,"value":30},"Model Predictive Control (MPC) is the optimal control method that use optimization algorithms to solve the cost function the occurs from the desired input and obtain back the optimal input control over the finite and infinite horizons. Recently, MPC is hyping up among the control system researcher, since it is fast, efficiency and robustness for any high complex system.",{"type":17,"tag":32,"props":33,"children":40},"div",{"className":34},[35,36,37,38,39],"grid","grid-cols-2","space-x-10","justify-center","items-center",[41,49],{"type":17,"tag":42,"props":43,"children":48},"img",{"className":44,"src":12,"width":46,"height":47},[45],"mx-auto","600px","300px",[],{"type":17,"tag":42,"props":50,"children":53},{"className":51,"src":52,"width":46,"height":47},[45],"/topics/robotics/nmpc/set_points.png",[],{"type":17,"tag":55,"props":56,"children":62},"figcaption",{"className":57},[58,59,60,61],"text-center","text-sm","text-neutral-600","dark:text-neutral-400",[63],{"type":23,"value":64},"\n      A car with finite horizons prediction and set point prediction over finite horizons.\n",{"type":17,"tag":18,"props":66,"children":68},{"id":67},"nonlinear-model-predictive-control",[69],{"type":23,"value":70},"Nonlinear Model Predictive Control ?",{"type":17,"tag":26,"props":72,"children":73},{},[74,76,82,84,93,95,99,101],{"type":23,"value":75},"We already done ",{"type":17,"tag":77,"props":78,"children":79},"strong",{},[80],{"type":23,"value":81}," Linear Model Predictive Control ",{"type":23,"value":83},", you can read it here ",{"type":17,"tag":85,"props":86,"children":90},"a",{"href":87,"rel":88},"https://sokhengdin.github.io/topics/robotics/linear-mpc",[89],"nofollow",[91],{"type":23,"value":92},"linear-mpc",{"type":23,"value":94},". Nonlinear Model Predictive Control has the same basic core of its control algorithms. The different is about the mathematical solving over the system. ",{"type":17,"tag":96,"props":97,"children":98},"br",{},[],{"type":23,"value":100},"\nIn the real-life application, most of the system certainly nonlinear and it's more complex than linear model. Linear systems are mostly time-invariant, meaning that the response of the system input is time-independent. Nonlinear systems are time-varying meaning that the response of the system to any input is time-dependent.",{"type":17,"tag":96,"props":102,"children":103},{},[],{"type":17,"tag":26,"props":105,"children":106},{},[107],{"type":23,"value":108},"The system model can be represent as state-space model",{"type":17,"tag":110,"props":111,"children":114},"math-render",{"latex-express":112,"styles":58,"dist-cond":113}," \\dot{X} = f(X,U) ","true",[],{"type":17,"tag":26,"props":116,"children":117},{},[118],{"type":23,"value":119},"Nonlinear Model Predictive Control also works by solving the quardratic cost subject to the nonlinear function over a future finite horizons. The quadractic cost can be define as",{"type":17,"tag":110,"props":121,"children":123},{"latex-express":122,"styles":58,"dist-cond":113},"J(x,u) = \\displaystyle\\sum_{k=0}^{N-1}(X_{k, ref}-X_{k})^{T}Q(X_{k, ref}-X_{k})+(U_{k,ref}-U_{k})^{T}R(U_{k,ref}-U_{k}) + \\phi(X_{N})",[],{"type":17,"tag":26,"props":125,"children":126},{},[127],{"type":23,"value":128},"Notation",{"type":17,"tag":130,"props":131,"children":132},"ul",{},[133,145,154,163],{"type":17,"tag":134,"props":135,"children":136},"li",{},[137,143],{"type":17,"tag":110,"props":138,"children":142},{"latex-express":139,"styles":140,"dist-cond":141},"X","inline-flex","false",[],{"type":23,"value":144}," is the state of the system. This shall be obtained from the optimiztion problem",{"type":17,"tag":134,"props":146,"children":147},{},[148,152],{"type":17,"tag":110,"props":149,"children":151},{"latex-express":150,"styles":140,"dist-cond":141},"X_{ref}",[],{"type":23,"value":153}," is the reference state of the system or desired input state.",{"type":17,"tag":134,"props":155,"children":156},{},[157,161],{"type":17,"tag":110,"props":158,"children":160},{"latex-express":159,"styles":140,"dist-cond":141},"U",[],{"type":23,"value":162}," is the input control of the system. This is a solution obtained from the optimization problem.",{"type":17,"tag":134,"props":164,"children":165},{},[166,170],{"type":17,"tag":110,"props":167,"children":169},{"latex-express":168,"styles":140,"dist-cond":141},"U_{ref}",[],{"type":23,"value":171}," is the reference control of the system or desired input control.",{"type":17,"tag":26,"props":173,"children":174},{},[175],{"type":23,"value":176},"Rewrite the optimization of NMPC problem.",{"type":17,"tag":110,"props":178,"children":180},{"latex-express":179,"styles":58,"dist-cond":113},"\n      \\begin{align*}\n            \\min_{u_{0}, u_{1}, ..., u_{N-1} } \\quad \\sum_{k=0}^{N-1}(X_{k, ref}-X_{k})^{T}&Q(X_{k, ref}-X_{k})+(U_{k,ref}-U_{k})^{T}R(U_{k,ref}-U_{k}) + \\phi(X_{N})\\\\\n            \\text{subject to} \\quad & x_{k+1} = f(x_k, u_k) \\quad \\text{(System dynamics)} \\\\\n            & g(x_k, x_k) \\leq 0 \\quad \\text{(State constraints)} \\\\\n            & h(x_k, x_k) \\leq 0 \\quad \\text{(Input constraints)} \\\\\n            & p(x_k) \\leq 0 \\quad \\text{(Path constraints)} \\\\\n            & x_0=x(0)  \\quad \\text{(Initial condition)}\n      \\end{align*}\n            ",[],{"type":17,"tag":26,"props":182,"children":183},{},[184],{"type":23,"value":185},"Which,",{"type":17,"tag":130,"props":187,"children":188},{},[189,198,207,216,224],{"type":17,"tag":134,"props":190,"children":191},{},[192,196],{"type":17,"tag":110,"props":193,"children":195},{"latex-express":194,"styles":140,"dist-cond":141},"f",[],{"type":23,"value":197}," is the system dynamics model.",{"type":17,"tag":134,"props":199,"children":200},{},[201,205],{"type":17,"tag":110,"props":202,"children":204},{"latex-express":203,"styles":140,"dist-cond":141},"g",[],{"type":23,"value":206}," is the state constraints of the system.",{"type":17,"tag":134,"props":208,"children":209},{},[210,214],{"type":17,"tag":110,"props":211,"children":213},{"latex-express":212,"styles":140,"dist-cond":141},"h",[],{"type":23,"value":215}," is the input constraints of the system.",{"type":17,"tag":134,"props":217,"children":218},{},[219,222],{"type":17,"tag":110,"props":220,"children":221},{"latex-express":26,"styles":140,"dist-cond":141},[],{"type":23,"value":223}," is the path constraint, it help to ensure the safety following path of our system.",{"type":17,"tag":134,"props":225,"children":226},{},[227,231],{"type":17,"tag":110,"props":228,"children":230},{"latex-express":229,"styles":140,"dist-cond":141},"\\phi(X_{N})",[],{"type":23,"value":232}," is the terminal cost of the system.",{"type":17,"tag":18,"props":234,"children":236},{"id":235},"discretize-the-system-model-with-runge-kutta-4th-order",[237],{"type":23,"value":238},"Discretize the system model with Runge-Kutta 4th order",{"type":17,"tag":26,"props":240,"children":241},{},[242,244,249,251],{"type":23,"value":243},"I will choose a simple system mode robot ",{"type":17,"tag":77,"props":245,"children":246},{},[247],{"type":23,"value":248}," DifferentialDrive ",{"type":23,"value":250},". ",{"type":17,"tag":96,"props":252,"children":253},{},[],{"type":17,"tag":26,"props":255,"children":256},{},[257],{"type":23,"value":258},"The forward kinematic equation",{"type":17,"tag":110,"props":260,"children":262},{"latex-express":261,"styles":58},"\n\\begin{bmatrix} v_{x} \\\\ v_{y} \\\\ v_{\\theta} \\end{bmatrix} = \\begin{bmatrix} v\\sin{(\\theta)} \\\\ v\\cos{(\\theta)} \\\\ \\omega \\end{bmatrix}\n ",[],{"type":17,"tag":26,"props":264,"children":265},{},[266],{"type":23,"value":267},"State constraints are the restriction imposed on the state variable of the system. It helps our optimizer not to obtain the solution that is outside the boundary region and also ensure the system to always perform the minimal action control in any critical condition.",{"type":17,"tag":26,"props":269,"children":270},{},[271],{"type":23,"value":272},"We, then can do the approximation",{"type":17,"tag":110,"props":274,"children":276},{"latex-express":275,"styles":58,"dist-cond":113},"\n    \\begin{align*}\n        k_{1} &= f(x^{*}, u^{*}) \\\\\n        k_{2} &= f(x^{*}+k_{1}\\frac{dt}{2}, u^{*}) \\\\ \n        k_{3} &= f(x^{*}+k_{2}\\frac{dt}{2}, u^{*}) \\\\\n        k_{4} &= f(x^{*}+k_{3}dt, u^{*}) \\\\ \n        \\Rightarrow{x_{k+1} } &= x_{k} + (k_{1}+2k_{2}+2k_{3}+k_{4})\\frac{dt}{6}\n    \\end{align*}\n",[],{"title":7,"searchDepth":278,"depth":278,"links":279},2,[280,281,282],{"id":20,"depth":278,"text":24},{"id":67,"depth":278,"text":70},{"id":235,"depth":278,"text":238},"markdown","content:topics:robotics:nonlinear-mpc.md","content","topics/robotics/nonlinear-mpc.md","md",1693655787768]