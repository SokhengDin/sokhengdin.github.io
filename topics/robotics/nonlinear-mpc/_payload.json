[{"data":1,"prerenderedAt":166},["Reactive",2],{"content-/topics/robotics/nonlinear-mpc":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"_empty":6,"title":8,"description":9,"author":10,"slug":11,"tag":11,"img":12,"body":13,"_type":161,"_id":162,"_source":163,"_file":164,"_extension":165},"/topics/robotics/nonlinear-mpc","robotics",false,"","Nonlinear Model Predictive Control","Introduction to Nonlinear Model Predictive Control","Din Sokheng","nonlinear-mpc","/topics/robotics/nmpc/predict_horizon.png",{"type":14,"children":15,"toc":156},"root",[16,25,31,54,65,71,104,109,114,119,123,152],{"type":17,"tag":18,"props":19,"children":21},"element","h2",{"id":20},"what-is-model-predictive-control",[22],{"type":23,"value":24},"text","What is Model Predictive Control ?",{"type":17,"tag":26,"props":27,"children":28},"p",{},[29],{"type":23,"value":30},"Model Predictive Control (MPC) is the optimal control method that use optimization algorithms to solve the cost function the occurs from the desired input and obtain back the optimal input control over the finite and infinite horizons. Recently, MPC is hyping up among the control system researcher, since it is fast, efficiency and robustness for any high complex system.",{"type":17,"tag":32,"props":33,"children":40},"div",{"className":34},[35,36,37,38,39],"grid","grid-cols-2","space-x-10","justify-center","items-center",[41,49],{"type":17,"tag":42,"props":43,"children":48},"img",{"className":44,"src":12,"width":46,"height":47},[45],"mx-auto","600px","300px",[],{"type":17,"tag":42,"props":50,"children":53},{"className":51,"src":52,"width":46,"height":47},[45],"/topics/robotics/nmpc/set_points.png",[],{"type":17,"tag":55,"props":56,"children":62},"figcaption",{"className":57},[58,59,60,61],"text-center","text-sm","text-neutral-600","dark:text-neutral-400",[63],{"type":23,"value":64},"\n      A car with finite horizons prediction and set point prediction over finite horizons.\n",{"type":17,"tag":18,"props":66,"children":68},{"id":67},"nonlinear-model-predictive-control",[69],{"type":23,"value":70},"Nonlinear Model Predictive Control ?",{"type":17,"tag":26,"props":72,"children":73},{},[74,76,82,84,93,95,99,101],{"type":23,"value":75},"We already done ",{"type":17,"tag":77,"props":78,"children":79},"strong",{},[80],{"type":23,"value":81}," Linear Model Predictive Control ",{"type":23,"value":83},", you can read it here ",{"type":17,"tag":85,"props":86,"children":90},"a",{"href":87,"rel":88},"https://sokhengdin.github.io/topics/robotics/linear-mpc",[89],"nofollow",[91],{"type":23,"value":92},"linear-mpc",{"type":23,"value":94},". Nonlinear Model Predictive Control has the same basic core of its control algorithms. The different is about the mathematical solving over the system. ",{"type":17,"tag":96,"props":97,"children":98},"br",{},[],{"type":23,"value":100},"\nIn the real-life application, most of the system certainly nonlinear and it's more complex than linear model. Linear systems are mostly time-invariant, meaning that the response of the system input is time-independent. Nonlinear systems are time-varying meaning that the response of the system to any input is time-dependent.",{"type":17,"tag":96,"props":102,"children":103},{},[],{"type":17,"tag":26,"props":105,"children":106},{},[107],{"type":23,"value":108},"The system model can be represent as state-space model",{"type":17,"tag":110,"props":111,"children":113},"math-render",{"latex-express":112,"styles":58}," \\dot{X} = f(X,U) ",[],{"type":17,"tag":26,"props":115,"children":116},{},[117],{"type":23,"value":118},"Nonlinear Model Predictive Control also works by solving the quardratic cost subject to the nonlinear function over a future finite horizons. The quadractic cost can be define as",{"type":17,"tag":110,"props":120,"children":122},{"latex-express":121,"styles":58},"J(x,u) = \\displaystyle\\sum_{k=0}^{N-1}(X_{k, ref}-X_{k})^{T}Q(X_{k, ref}-X_{k})+(U_{k,ref}-U_{k})^{T}R(U_{k,ref}-U_{k}) + \\phi(X_{N}, U_{N})",[],{"type":17,"tag":26,"props":124,"children":125},{},[126,128,133,135,139,141,145,147,150],{"type":23,"value":127},"The terms ",{"type":17,"tag":110,"props":129,"children":132},{"latex-express":130,"styles":131}," X_{k}, U_{k} ","inline-flex",[],{"type":23,"value":134}," are the state and the input control of our system in each prediction horizon, ",{"type":17,"tag":110,"props":136,"children":138},{"latex-express":137,"styles":131}," k\\in{1,..., N} ",[],{"type":23,"value":140},"  is the number of prediction horizon over a finite future, ",{"type":17,"tag":110,"props":142,"children":144},{"latex-express":143,"styles":131}," Q \\hspace{0.1cm} \\text{and} \\hspace{0.1cm} R",[],{"type":23,"value":146}," are the diagonalized  matrix that used to tune the behavior of the system. ",{"type":17,"tag":96,"props":148,"children":149},{},[],{"type":23,"value":151},"\nRewrite the optimization of NMPC problem.",{"type":17,"tag":110,"props":153,"children":155},{"latex-express":154,"styles":58}," \n      \\begin{align}\n      \\min_{ u_{0}, u_{1}, ..., u_{N-1} } \\quad & \\sum_{k=0}^{N-1}X_{k}^{T}QX_{k}+U_{k}^{T}RU_{k} + \\phi(X_{N}) \\\\\n      \\text{subject to} \\quad & x_{k+1} = f(x_k, u_k) \\quad \\text{(System dynamics)} \\\\\n      & g(x_k, x_k) \\leq 0 \\quad \\text{(State constraints)} \\\\\n      & h(x_k, x_k) \\leq 0 \\quad \\text{(Input constraints)} \\\\\n      & p(x_k) \\leq 0 \\quad \\text{(Path constraints)} \\\\\n      & x_0=x(0)  \\quad \\text{(Initial condition)}\n      \\end{align}\n      ",[],{"title":7,"searchDepth":157,"depth":157,"links":158},2,[159,160],{"id":20,"depth":157,"text":24},{"id":67,"depth":157,"text":70},"markdown","content:topics:robotics:nonlinear-mpc.md","content","topics/robotics/nonlinear-mpc.md","md",1693645120356]